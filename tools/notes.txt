
Fields in chainparams.cpp

hashGenesisBlock:  checkpointData[0]
magic:             pchMessageStart
port:              nDefaultPort
dns seeds:         vSeeds
bip32/private:     base58Prefixes[EXT_SECRET_KEY]
bip32/public:      base58Prefixes[EXT_PUBLIC_KEY]
private:           base58Prefixes[SECRET_KEY]
public:            base58Prefixes[PUBKEY_ADDRESS]
p2sh:              base58Prefixes[SCRIPT_ADDRESS]

???:               bech32_hrp


Fields in hainparamsbase.cpp
portRpc            nRPCPort

Fields in amount.h
per1               COIN

Fields in validation.cpp, also main.cpp
messageMagic       strMessageMagic


Bip44 from https://github.com/satoshilabs/slips/blob/master/slip-0044.md
bip44               hexa    (testnet, regtest is always 0x1)



// --------- Fields in old bitcoin clones before chainparams -------

DNS Seeds : in net.cpp
    static const char *strMainNetDNSSeed[][2] = {
        {"primecoin.net", "seed.ppcoin.net"},
        {"xpm.altcointech.net", "dnsseed.xpm.altcointech.net"},
        {"xpm2.altcointech.net", "dnsseed.xpm2.altcointech.net"},
        {"primeseed.muuttuja.org", "primeseed.muuttuja.org"},
        {NULL, NULL}
    };
    
    static const char *strTestNetDNSSeed[][2] = {
        {"primecoin.net", "tnseed.ppcoin.net"},
        {"primeseedtn.muuttuja.org", "primeseedtn.muuttuja.org"},
        {NULL, NULL}
    };


Address Prefixes:  in base58.h
public      PUBKEY_ADDRESS,  PUBKEY_ADDRESS_TEST
script      SCRIPT_ADDRESS,  SCRIPT_ADDRESS_TEST
private     in CBitcoinSecret::setSecret(). line looks like:
            SetData(128 + (fTestNet ? CBitcoinAddress::PUBKEY_ADDRESS_TEST : CBitcoinAddress::PUBKEY_ADDRESS), &vchSecret[0], vchSecret.size());
            (128 is the private key prefix, 0x80 in hex.)


bip32/public:     use 0x0488b21e   ( same as bitcoin)
bip32/private:    use 0x0488ade4   ( same as bitcoin)


hashGenesisBlock:  in main.h
    static const uint256 hashGenesisBlockOfficial("0x0000000032fe677166d54963b62a4677d8957e87c508eaa4fd7eb1c880cd27e3");
    static const uint256 hashGenesisBlockTestNet("0x00000001f757bb737f6596503e17cd17b0658ce630cc727c0cca81aec47c9f06");

protocol/magic:    in main.cpp
    unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };
     ...  
    if (fTestNet)
    {
        pchMessageStart[0] = 0x0b;
        pchMessageStart[1] = 0x11;
        pchMessageStart[2] = 0x09;
        pchMessageStart[3] = 0x07;
        hashGenesisBlock = uint256("000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943");
    }


port, portRpc:    in protocol.h
    #define PPCOIN_PORT  9901
    #define RPC_PORT     9902
    #define TESTNET_PORT 9903
    #define TESTNET_RPC_PORT 9904

per1:             in util.h
    static const int64 COIN = 1000000;


// ------------ Altcoin Notes ---------------

Decred:
    https://github.com/decred
    Written in golang.
    
    found messageMagic in Wallet::SignMessage() at
    https://github.com/decred/dcrwallet/blob/master/wallet/wallet.go
    
Stellar:
    https://github.com/stellar/stellar-core
    written in C++
    not based on bitcoin-core
    
Neo:
    https://github.com/stellar/stellar-core
    written in C#

NEM:
    https://github.com/NemProject/nem.core
    written in java.
    
Lisk:
    https://github.com/LiskHQ/lisk
    written in javascript.
    
Bytecoin:
    written in C, cryptonote stack.
    
Siacoin:
    https://github.com/LiskHQ/lisk
    written in go.
    
Waves:
    https://github.com/wavesplatform/Waves
    written in scala.

Stratis:
    https://github.com/stratisproject/StratisBitcoinFullNode
    written in C#
    
Kryptonex:
    https://github.com/Cryptonex/source/tree/master/src
    based on old bitcoin-core
    no chainparams.cpp
    
GxChain:
    https://github.com/gxchain/gxb-core
    written in webassembly
    
Ardor:
    https://github.com/mrv777/Ardor
    written in java.
    
Ark:
    https://github.com/ArkEcosystem/ark-node
    written in javascript.

Byteball:
    https://github.com/byteball
    written in javascript
    
Electroneum:
    https://github.com/electroneum
    forked from monero
    
BitcoinDark:
    https://github.com/jl777/btcd
    based on old bitcoin-core
    no chainparams.cpp
    
AChain:
    https://github.com/Achain-Dev/Achain
    written in Lua
    
Skycoin:
    https://github.com/skycoin/skycoin
    written in Go
    
Asch:
    https://github.com/AschPlatform/asch
    written in JS
    
Neblio:
    https://github.com/NeblioTeam/neblio
    bitcoin-core fork, no chainparams.cpp
    
DigitalNote:
    https://github.com/DigitalNoteXDN/digitalnote
    not a btc fork.  written in C++
    
BosCoin:
    written in D.  web ontology.
    
Primecoin:
    https://github.com/primecoin/primecoin/
    bitcoin-core fork.  no chainparams.cpp
    
Prizm:
    https://github.com/prizmspace/PrizmCore
    written in java.
    
Aeon
    https://github.com/floblockchain/flo
    cryptonote fork
    
    